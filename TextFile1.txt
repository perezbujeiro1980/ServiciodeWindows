using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

namespace ServicioPrueba
{
    public partial class Service1 : ServiceBase
    {
        public Service1()
        {
            InitializeComponent();
        }
        HttpListener listener;

        protected override void OnStart(string[] args)
        {


            
            // Establece la dirección IP y el puerto en los que el servidor escuchará las solicitudes
            string ipAddress = "127.0.0.1";
            int port = 8080;

            // Crea una instancia del objeto HttpListener
            listener = new HttpListener();
            listener.Prefixes.Add($"http://{ipAddress}:{port}/");
            listener.Start();

            // Inicia un hilo para manejar las solicitudes
            
            ThreadPool.QueueUserWorkItem(HandleRequests);            



        }

        protected override void OnStop()
        {


            listener.Stop();
            listener.Close();
        }

        private void HandleRequests(object state)
        {
            // Espera una solicitud
            HttpListenerContext context = listener.GetContext();

            if (context.Request.HttpMethod == "GET")
            {
                // Establece el tipo de contenido de la respuesta como XML
                context.Response.ContentType = "application/xml";
                // Construye el XML de ejemplo
                string xmlResponse = "<root><message>Hola mundo</message></root>";

                // Convierte el XML en bytes
                byte[] buffer = Encoding.UTF8.GetBytes(xmlResponse);

                // Obtiene el flujo de salida de la respuesta
                Stream output = context.Response.OutputStream;

                // Escribe los bytes en el flujo de salida
                output.Write(buffer, 0, buffer.Length);

                // Cierra el flujo de salida
                output.Close();

            }

            // Cierra la respuesta
            context.Response.Close();
        }
    }
}